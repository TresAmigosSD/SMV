#!/bin/bash

TEMPLATE_DIR="$(cd "`dirname "$0"`"; pwd)/templates"
TEMPLATE_DATA_DIR="$TEMPLATE_DIR/data"

# PROJ_TYPE:
#  - simple (default)
#  - enterprise
#  - test
PROJ_TYPE="simple"
OVERRIDE=0

while [[ $# -gt 1 ]]
do
FLAG=$1

  case $FLAG in
    -q)
    QUITE_MODE=1
    shift
    ;;
    -s|-simple)
    PROJ_TYPE="simple"
    shift
    ;;
    -e|-enterprise)
    PROJ_TYPE="enterprise"
    shift
    ;;
    -t|-test)
    PROJ_TYPE="test"
    shift
    ;;
    -b|-big)
    PROJ_TYPE="big"
    shift
    ;;
    -o)
    OVERRIDE=1
    shift
    ;;
    *)
    ;;
  esac
done

TEMPLATE_DIR+="/$PROJ_TYPE"

if [ $# -ne 1 ]; then
    echo "ERROR: Invalid number of arguments"
    echo "USAGE: $0 [-q][-o] [-s|-e|-t] project_name"
    echo "project types:"
    echo "  -s: simple (default)"
    echo "  -e: enterprise"
    echo "  -t: test (for developers only)"
    echo "example:"
    echo "  \$ $0 MyProject"
    exit 1
fi

PROJ_DIR="$1"
PROJ_CLASS=""

# proj class hardcoded for smv integration tests
if [ "$PROJ_TYPE" = "test" ]; then
  PROJ_CLASS="integration.test"
fi

function extract_group_artifact_ids()
{
    PROJ_GROUP_ID="${PROJ_CLASS%.*}"
    PROJ_ARTIFACT_ID="${PROJ_CLASS##*.}"

    if [ "$PROJ_GROUP_ID" == "$PROJ_ARTIFACT_ID" ]; then
        echo "Invalid project class: $PROJ_CLASS"
        echo "the class must have at least two levels a.b"
        exit 1
    fi
}

function create_proj_dir()
{
    echo "-- creating project directory"

    if [ -d "$PROJ_DIR" ]; then
      if [ $OVERRIDE -eq 0 ]; then
        echo "   $PROJ_DIR already exists, use the -o flag to authorize override."
        exit 1
      else
        echo "   $PROJ_DIR already exists, converting to SMV project..."
      fi

      # if creating SMV project from existing dir, it must not contain an smv-app-conf.props file
      if [ -f "$PROJ_DIR/conf/smv-app-conf.props" ]; then
        echo "   Error: $PROJ_DIR is already an SMV project. Quitting."
        exit 1
      fi
    fi

    mkdir -p "$PROJ_DIR"
    export PROJ_DIR_FULL_PATH=$(cd $PROJ_DIR; /bin/pwd)
}

function copy_with_inject()
{
    SRC="$1"
    DST="$2"
    echo "-- copying `basename "$DST"`"

    ESCAPED_FULL_PATH=$(echo ${PROJ_DIR_FULL_PATH}|sed -e 's/[\/&]/\\&/g')

    mkdir -p "$(dirname "$DST")"
    sed -e "s/_GROUP_ID_/$PROJ_GROUP_ID/" \
        -e "s/_ARTIFACT_ID_/$PROJ_ARTIFACT_ID/" \
        -e "s/_PROJ_CLASS_/$PROJ_CLASS/g" \
        -e "s/_PROJ_DIR_FULL_PATH_/${ESCAPED_FULL_PATH}/g" \
        < "$SRC" > "$DST"
}

function copy_conf_files()
{
    # copy appropriate files based on project type
    PYTHON_FILES="README.md notebooks/Untitled.ipynb .gitignore.template log4j.properties conf/smv-app-conf.props conf/smv-user-conf.props"
    SCALA_FILES="$PYTHON_FILES build.sbt pom.xml project/assembly.sbt project/build.properties"
    ENTERPRISE_FILES="$PYTHON_FILES conf/smv-user-conf.props.template"

    if [ "$PROJ_TYPE" = "test" ] ; then
      for f in $SCALA_FILES; do
          copy_with_inject "$TEMPLATE_DIR/$f" "$PROJ_DIR/$f"
      done
    elif [ "$PROJ_TYPE" = "enterprise" ] ; then
      for f in $ENTERPRISE_FILES; do
          copy_with_inject "$TEMPLATE_DIR/$f" "$PROJ_DIR/$f"
      done
    else
      for f in $PYTHON_FILES; do
          copy_with_inject "$TEMPLATE_DIR/$f" "$PROJ_DIR/$f"
      done
    fi


    # .gitignore was postfixed with .template so it does not affect SMV's git repo
    mv "$PROJ_DIR/.gitignore.template" "$PROJ_DIR/.gitignore"
}

function copy_data_files()
{
    data_dir=$1

    echo "-- copying data files"

    cp -R "$data_dir" "$PROJ_DIR"
}

function copy_src_dir()
{
    subdir=$1
    proj_cp=$2
    DST_DIR="${PROJ_DIR_FULL_PATH}/src/${subdir}/${proj_cp}"

    (cd ${TEMPLATE_DIR}/src/${subdir}; find . -type f | while read f; do
      SRC_FILE="${TEMPLATE_DIR}/src/${subdir}/$f"
      DST_FILE="${DST_DIR}/$f"
      copy_with_inject "$SRC_FILE" "$DST_FILE"
    done)
}

function copy_src_files()
{
    echo "-- copying source files"

    PROJ_CLASS_PATH="`echo $PROJ_CLASS | sed -e 's/\./\//g'`"

    if [ "$PROJ_TYPE" = "simple" ] || [ "$PROJ_TYPE" = "enterprise" ] || [ "$PROJ_TYPE" = "big" ]; then
      for subdir in main/python; do
          copy_src_dir ${subdir} ${PROJ_CLASS_PATH}
      done
    else
      for subdir in main/scala main/python; do
          copy_src_dir ${subdir} ${PROJ_CLASS_PATH}
      done
    fi
}

function create_python_packages()
{
    for dir in $(ls -d ${PROJ_DIR_FULL_PATH}/src/main/python/*/); do
        find ${dir} -type d -print0 | xargs -0 -I\{\} touch \{\}/__init__.py
    done
}

# --- MAIN ---
# only test proj has PROJ_CLASS
if [ "$PROJ_TYPE" = "test" ] ; then
  extract_group_artifact_ids
fi

create_proj_dir
copy_conf_files

if [ "$PROJ_TYPE" = "test" ]; then
  copy_data_files "$TEMPLATE_DIR/data"
else
  copy_data_files $TEMPLATE_DATA_DIR
fi

copy_src_files
create_python_packages

if [ "$PROJ_TYPE" = "big" ] ; then
  $TEMPLATE_DIR/dupMod.sh $PROJ_DIR/src/main/python/stage1/employment.py $PROJ_DIR/src/main/python/stage1/ 1000
  rm $PROJ_DIR/src/main/python/stage1/employment.py
fi
