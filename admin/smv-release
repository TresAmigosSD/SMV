#!/bin/bash
# Release the current version of SMV.  This will use the tresamigos:smv
# docker container to maintain release consistency.

set -e
PROG_NAME=$(basename "$0")


function info()
{
  echo "---- $@"
  echo "---- $@" >> ${LOGFILE}
}

function error()
{
  echo "ERROR: $@"
  echo "ERROR: $@" >> ${LOGFILE}
  echo "(See ${BUILD_DIR} for error logs/assets)"
  exit 1
}

function usage()
{
  echo "USAGE: ${PROG_NAME} [--new-branch] [--latest] build_dir branch_name github_user:github_token docker_user docker_password smv_version_to_release(a.b.c.d)"
  echo "See (https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) for auth tokens"
  exit $1
}

function parse_args()
{
  [ "$1" = "-h" ] && usage 0

  NEW_BRANCH=0
  if [ "$1" = "--new-branch" ]; then
    NEW_BRANCH=1
    shift
  fi

  IS_LATEST=0
  if [ "$1" = "--latest" ]; then
    IS_LATEST=1
    shift
  fi

  [ $# -ne 6 ] && echo "ERROR: invalid number of arguments" && usage 1

  BUILD_DIR=$(cd "$1"; pwd)
  SMV_BRANCH="$2"
  GITHUB_USER_TOKEN="$3"
  DOCKERHUB_USER_NAME="$4"
  DOCKERHUB_USER_PASSWORD="$5"
  SMV_VERSION="$6"

  validate_version "$SMV_VERSION"
  if [ ! -d "${BUILD_DIR}" ]; then
    echo "ERROR: ${BUILD_DIR} is not a valid build directory"
    exit 1
  fi

  # version specific vars
  LOGFILE="${BUILD_DIR}/smv-release.log"
  rm -f "${LOGFILE}"
  TGZ_IMAGE="${BUILD_DIR}/smv_${SMV_VERSION}.tgz"
  DOCS_DIR="${BUILD_DIR}/docs"

  # release specific vars
  SMV_DIR_BASE="SMV_${SMV_VERSION}"
  SMV_DIR="${BUILD_DIR}/${SMV_DIR_BASE}"
  DOCKER_SMV_DIR="/projects/${SMV_DIR_BASE}" # SMV dir inside the docker image.
  PROJ_DIR="$(dirname "$SMV_DIR")" # assume parent of SMV directory is the projects dir.

  GHPAGES_DIR="${HOME}/.smv/ghpages"
  SMV_REPO_URL="git@github.com:TresAmigosSD/SMV.git"
}

function clone_repo()
{
  info "cloning SMV repo branch: ${SMV_BRANCH}"
  cd "${PROJ_DIR}"
  rm -rf "${SMV_DIR_BASE}"
  git clone -b "${SMV_BRANCH}" "${SMV_REPO_URL}" "${SMV_DIR_BASE}"\
    >> ${LOGFILE} 2>&1 || error "cloning SMV ${SMV_BRANCH}"
}

function check_for_existing_tag()
{
  info "checking for existing tag"
  cd "${SMV_DIR}"
  if [ $(git tag -l "v${SMV_VERSION}" | wc -l) -eq 1 ]; then
    error version ${SMV_VERSION} already exists.
  fi
}

function get_prev_smv_version()
{
  PREV_SMV_VERSION=$(cat "${SMV_DIR}/.smv_version")
  info "previous SMV version: $PREV_SMV_VERSION"
  validate_version "$PREV_SMV_VERSION"
}

# make sure version is of the format a.b.c.d where a,b,c,d are all numbers.
function validate_version()
{
  local ver="$1"
  local res=$(echo "$ver" | sed -E -e 's/^([0-9]+\.){3}[0-9]+$//')
  if [ -n "$res" ]; then
    echo "ERROR: invalid version format: $ver"
    usage 1
  fi
}

function build_local_docker_image()
{
  info "building local docker image"

  cd "${SMV_DIR}/docker/smv"
  # build local docker image tag as `local_docker_build`
  docker build -t local_docker_build . >> ${LOGFILE} 2>&1 || error "local docker build failed"
}

function run_sbt_in_docker()
{
  local target="$1"
  info "Running sbt ${target}"

  # explicitly add -ivy flag as SMV docker image is not picking up sbtopts file. (SMV issue #556)
  docker run --rm -it -v ${PROJ_DIR}:/projects local_docker_build \
    -u $(id -u) sh -c "cd $DOCKER_SMV_DIR; sbt -ivy /projects/.ivy2 $target" \
    >> ${LOGFILE} 2>&1 || error "SMV sbt $target failed"
}

function build_smv()
{
  info "Building SMV"
  run_sbt_in_docker clean
  run_sbt_in_docker assembly
}

function test_smv()
{
  info "Testing SMV"

  # need to decompose the "alltest" target as the memory leak causes docker build to fail.
  run_sbt_in_docker test
  run_sbt_in_docker pytest
  run_sbt_in_docker itest
}

# find the gnu tar on this system.
function find_gnu_tar()
{
  info "find gnu tar"
  local tars="gtar gnutar tar"
  TAR=""
  for t in $tars; do
    if [ -n "$(type -p $t)" ]; then
      TAR=$t
      break
    fi
  done

  # make sure it is gnu tar:
  if [ $($TAR --version | head -1 | grep "GNU tar" | wc -l) -ne 1 ]; then
    echo "ERROR: did not find a gnu tar.  Need gnu tar to build SMV release"
    exit 1
  fi
}

# find the release message in /releases dir.
function find_release_msg_file()
{
  info "finding release message file"
  RELEASE_MSG_FILE="releases/v${SMV_VERSION}.md"
  cd "${SMV_DIR}"
  if [ ! -r "${RELEASE_MSG_FILE}" ]; then
    error "Unable to find release message file: ${RELEASE_MSG_FILE}"
  fi
}

function update_version()
{
  info "updating version to $SMV_VERSION"
  cd "${SMV_DIR}"
  # update to latest before making any changes.
  git pull >> ${LOGFILE} 2>&1 || error "git pull failed"

  # update version in user docs.
  find docs/user -name '*.md' \
    -exec perl -pi -e "s/${PREV_SMV_VERSION}/${SMV_VERSION}/g" \{\} +

  # update version in README file
  perl -pi -e "s/${PREV_SMV_VERSION}/${SMV_VERSION}/g" README.md

  # update version in Dockerfile
  perl -pi -e "s/${PREV_SMV_VERSION}/${SMV_VERSION}/g" docker/smv/Dockerfile

  # update version in smv-install
  perl -pi -e "s/${PREV_SMV_VERSION}/${SMV_VERSION}/g" tools/smv-install

  # add the smv version to the SMV directory.
  echo ${SMV_VERSION} > "${SMV_DIR}/.smv_version"

  git commit -a -m "updated version to $SMV_VERSION" \
    >> ${LOGFILE} 2>&1 || error "git commit failed"
  git push origin >> ${LOGFILE} 2>&1 || error "git push failed"
}

function tag_release()
{
  local tag=v"$SMV_VERSION"
  info "tagging release as $tag"
  cd "${SMV_DIR}"
  git tag -a $tag -m "SMV Release $SMV_VERSION on `date +%m/%d/%Y`" \
    >> ${LOGFILE} 2>&1 || error "git tag failed"
  git push origin $tag >> ${LOGFILE} 2>&1 || error "git tag push failed"
}

function create_tar()
{
  info "create tar image"

  # cleanup some unneeded binary files.
  rm -rf "${SMV_DIR}/project/target" "${SMV_DIR}/project/project"
  rm -rf "${SMV_DIR}/target/resolution-cache" "${SMV_DIR}/target/streams"
  # use the `find ... -exec` variant instead of xargs
  # because we don't want `rm` to execute if `find` returns nothing
  find "${SMV_DIR}/target" -name '*with-dependencies.jar' -prune -o -type f -exec rm -f \{\} +
  find "${SMV_DIR}/src" -name '*.pyc' -exec rm -f \{\} +
  find "${SMV_DIR}/src" -name '__pycache__' -exec rm -rf \{\} +

  # create the tar image
  ${TAR} zcvf "${TGZ_IMAGE}" -C "${PROJ_DIR}" --exclude=.git --exclude="admin" \
    ${SMV_DIR_BASE} >> ${LOGFILE} 2>&1 || error "tar creation failed"
}

# This only creates the release and does NOT attach the zip asset to it.
function create_github_release()
{
  info "Create github release"
  local body_file="${BUILD_DIR}/req1.body.json"
  local res_file="${BUILD_DIR}/res1.json"
  local rel_doc_url="https://github.com/TresAmigosSD/SMV/blob/v${SMV_VERSION}/releases/v${SMV_VERSION}.md"

  # create POST request body for creating the repo.
  # See https://developer.github.com/v3/repos/releases/ for details.
  echo "{" > $body_file
  echo "  \"tag_name\": \"v${SMV_VERSION}\"," >> $body_file
  echo "  \"name\": \"SMV v${SMV_VERSION} release $(date +%m/%d/%Y)\"," >> $body_file
  echo "  \"body\": \"See ${rel_doc_url} for release doc\"" >> $body_file
  echo "}" >> $body_file

  curl -i -u "${GITHUB_USER_TOKEN}" \
    -H "Content-Type: application/json" \
    -X POST \
    -d @${body_file} \
    https://api.github.com/repos/tresamigossd/SMV/releases \
    > ${res_file} 2>&1

  grep -q "^HTTP/1.1 201 Created" ${res_file} || error "Unable to create github release: see ${res_file}"

  # extract the upload_url from the server response.  Need url to upload assets.
  UPLOAD_URL="$(sed -n -e 's/^[ ]*"upload_url":[ ]*"\(https:.*assets\).*/\1/gp' ${res_file})"
  echo "Using UPLOAD_URL: ${UPLOAD_URL}" >> ${LOGFILE}
}

function attach_tar_to_github_release()
{
  info "attach tar image to github release"
  local res_file="${BUILD_DIR}/res2.json"
  local tgz_basename="$(basename ${TGZ_IMAGE})"

  curl -i -u "${GITHUB_USER_TOKEN}" \
    -H "Content-Type: application/gzip" \
    -X POST \
    --data-binary "@${TGZ_IMAGE}" \
    "${UPLOAD_URL}?name=${tgz_basename}" \
    > ${res_file} 2>&1

  grep -q "^HTTP/1.1 201 Created" ${res_file} || error "Unable to upload tgz image to github: see ${res_file}"

}

function create_docker_image()
{
  local tag=v"$SMV_VERSION"

  cd "${SMV_DIR}/docker/smv"

  info "logging in to docker hub"
  docker login -u ${DOCKERHUB_USER_NAME} -p ${DOCKERHUB_USER_PASSWORD}

  info "building docker image"
  docker build -t docker_build . >> ${LOGFILE} 2>&1 || error "docker build failed"

  info "pushing new tagged docker image (${tag})"
  docker tag docker_build tresamigos/smv:${tag} >> ${LOGFILE} 2>&1 || error "docker tag failed"
  docker push tresamigos/smv:${tag} >> ${LOGFILE} 2>&1 || error "docker push failed"

  if [ ${IS_LATEST} -eq 1 ]; then
    info "pushing docker image as latest"
    docker tag docker_build tresamigos/smv:latest >> ${LOGFILE} 2>&1 || error "docker tag failed"
    docker push tresamigos/smv:latest >> ${LOGFILE} 2>&1 || error "docker push failed"
  fi
}

function gen_pydocs()
{
  info "generating python docs"
  local smv_py_dir="${DOCKER_SMV_DIR}/src/main/python"
  local spark_py_dir="/usr/lib/spark/python"
  mkdir -p ${DOCS_DIR}/python

  # py4j lib dir version changes with spark version.  Must extract version used in spark.
  py4j_lib=$(docker run --rm -it tresamigos/smv:v${PREV_SMV_VERSION} -u $(id -u) \
    sh -c "find ${spark_py_dir}/lib -maxdepth 1 -mindepth 1 -name 'py4j*-src.zip' -print" | tr -d '\r')

  docker run --rm -it \
    -v ${PROJ_DIR}:/projects -v ${DOCS_DIR}/python:/pydoc \
    tresamigos/smv:v${PREV_SMV_VERSION} \
    -u $(id -u)\
    sh -c "
      set -e;
      cd $DOCKER_SMV_DIR;
      export PYTHONPATH=\"${smv_py_dir}:${spark_py_dir}:${py4j_lib}:\";
      export SMV_VERSION=${SMV_VERSION};
      sphinx-apidoc --full -o /pydoc ${smv_py_dir}/smv;
      cd /pydoc;
      cp ${DOCKER_SMV_DIR}/admin/conf/sphinx-conf.py /pydoc/conf.py;
      make html" \
    >> ${LOGFILE} 2>&1 || error "python doc generation failed"
}

function gen_scaladocs()
{
  info "generating scala docs"
  mkdir -p ${DOCS_DIR}/scala

  docker run --rm -it \
    -v ${PROJ_DIR}:/projects -v ${DOCS_DIR}/scala:/scaladoc \
    tresamigos/smv:v${PREV_SMV_VERSION} \
    -u $(id -u)\
    sh -c "
      cd $DOCKER_SMV_DIR;
      sbt doc;
      cp -R target/scala-*/api/* /scaladoc" \
    >> ${LOGFILE} 2>&1 || error "scala doc generation failed"
}

# the gh-pages branch contains the static site docs.
# the gh-pages branch will be cloned/pulled into ~/.smv/ghpages/SMV
function get_latest_ghpages()
{
  info "fetching latest SMV gh-pages branch to ~/.smv/ghpages/SMV"

  mkdir -p "${GHPAGES_DIR}"
  cd "${GHPAGES_DIR}"

  # clone repo if it does not exist, else just pull
  if [ -d "SMV" ]; then
    (cd "${GHPAGES_DIR}/SMV"; git pull) \
      >> ${LOGFILE} 2>&1 || error "pulling latest SMV ghpages"
  else
    git clone -b gh-pages "${SMV_REPO_URL}" \
      >> ${LOGFILE} 2>&1 || error "cloning SMV ghpages"
  fi
}

# copy the generated py/scala docs to the ghpages dir under the current version.
# update the links on the main index page to point to current version.
function update_ghpages_docs()
{
  cd "${GHPAGES_DIR}/SMV"

  info "copying pythondocs to ~/.smv/ghpages/SMV/pythondocs"
  local py_ver_dir="pythondocs/${SMV_VERSION}"
  mkdir -p $py_ver_dir
  cp -R ${DOCS_DIR}/python/_build/html/* $py_ver_dir

  info "copying scaladocs to ~/.smv/ghpages/SMV/scaladocs"
  local scala_ver_dir="scaladocs/${SMV_VERSION}"
  mkdir -p $scala_ver_dir
  cp -R ${DOCS_DIR}/scala/* $scala_ver_dir

  # do not update the index.html docs if this is the first branch release
  # user will need to update the ghpages index to add the new entry.
  if [ $NEW_BRANCH -eq 1 ]; then
    info "WARNING!!!! need to update ghpages index.html manually"
  else
    info "updating version numbers in ghpages index.html"
    sed -i'.bak' "s/${PREV_SMV_VERSION}/${SMV_VERSION}/g" index.html
    rm -f index.html.bak
  fi
}

function push_ghpages_docs()
{
  info "pushing doc updates to github SMV/gh-pages"
  cd "${GHPAGES_DIR}/SMV"

  git add .
  git commit -a -m "updating docs to v${SMV_VERSION}"
  git push >> ${LOGFILE} 2>&1 || error "pushing SMV ghpages"
}

# ---- MAIN ----
parse_args "$@"
info "Start Release on: $(date)"
clone_repo
check_for_existing_tag
get_prev_smv_version
find_gnu_tar
find_release_msg_file
build_local_docker_image
build_smv
test_smv
gen_pydocs
gen_scaladocs
update_version
tag_release
create_tar
create_github_release
attach_tar_to_github_release
get_latest_ghpages
update_ghpages_docs
push_ghpages_docs
create_docker_image
info "Finish Release on: $(date)"
